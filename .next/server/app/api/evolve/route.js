(()=>{var e={};e.id=57,e.ids=[57],e.modules={716:()=>{},846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},2518:e=>{"use strict";e.exports=require("mongodb")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6487:()=>{},9141:(e,t,r)=>{"use strict";let s;r.r(t),r.d(t,{patchFetch:()=>y,routeModule:()=>f,serverHooks:()=>w,workAsyncStorage:()=>g,workUnitAsyncStorage:()=>h});var o={};r.r(o),r.d(o,{POST:()=>x});var n=r(6559),a=r(8088),u=r(7719),i=r(2518);let p=process.env.MONGODB_URI;if(console.log("\uD83D\uDD0D Loaded MONGODB_URI:",p),!p)throw Error("❌ MONGODB_URI is missing from .env.local");let l=process.env.MONGODB_DB_NAME||"nao";if(global,!process.env.MONGODB_URI)throw Error("Please add your MongoDB URI to .env");async function c(){try{return(await s).db(l)}catch(e){throw console.error("❌ Failed to connect to MongoDB",e),e}}async function d(e,t){return console.log("\uD83D\uDD17 updateTokenURI called:",e,t),{success:!0,updated:new Date().toISOString(),tokenId:e,metadata:t}}s=new i.MongoClient(p).connect();var v=r(2190);async function x(e){try{let{walletId:t,source:r="apple"}=await e.json();if(!t)return v.NextResponse.json({error:"Missing walletId"},{status:400});let s=(await c()).collection("users"),o=await s.findOne({walletId:t});if(!o)return v.NextResponse.json({error:"User not found"},{status:404});let{healthSummary:n,passportId:a,xp:u=0}=o;if(!n)return v.NextResponse.json({error:"No health data found for user"},{status:400});if(!a)return v.NextResponse.json({error:"No NFT passport linked to user"},{status:400});let i=n.steps??0,p=u+.001*i,l=Math.floor(p/10),x={name:`NAO Passport Level ${l}`,description:`Health data synced from ${r}.`,attributes:[{trait_type:"Level",value:l},{trait_type:"XP",value:p},{trait_type:"Source",value:r},{trait_type:"Steps",value:i}]};await s.updateOne({walletId:t},{$set:{xp:p}});let f=await d(a,x);return v.NextResponse.json({status:"success",updatedLevel:l,updatedXp:p,nftResult:f})}catch(e){return console.error("❌ Evolve API error:",e),v.NextResponse.json({error:"Internal Server Error"},{status:500})}}let f=new n.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/evolve/route",pathname:"/api/evolve",filename:"route",bundlePath:"app/api/evolve/route"},resolvedPagePath:"/Users/user/nao-health-sync/app/api/evolve/route.ts",nextConfigOutput:"",userland:o}),{workAsyncStorage:g,workUnitAsyncStorage:h,serverHooks:w}=f;function y(){return(0,u.patchFetch)({workAsyncStorage:g,workUnitAsyncStorage:h})}},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[922],()=>r(9141));module.exports=s})();